#!/usr/bin/env python3
"""
Script de test pour le LSTM ultra-avanc√©
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from data_collector import DataCollector
from lstm_ultra import UltraLSTMPredictor
import pandas as pd
import numpy as np
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_ultra_lstm(symbol: str = "AAPL"):
    """
    Test du LSTM ultra-avanc√©
    """
    print(f"üöÄ TEST LSTM ULTRA-AVANC√â")
    print(f"Symbole: {symbol}")
    print("=" * 60)
    
    # 1. R√©cup√©ration des donn√©es
    print("üìä R√©cup√©ration des donn√©es...")
    collector = DataCollector()
    data = collector.get_stock_data(symbol, period="3y")  # Plus de donn√©es historiques
    
    if data is None or len(data) < 200:
        print("‚ùå Donn√©es insuffisantes")
        return
    
    print(f"‚úÖ Donn√©es r√©cup√©r√©es: {len(data)} enregistrements")
    
    # 2. Test LSTM Ultra-Avanc√©
    print("\nüöÄ TEST LSTM ULTRA-AVANC√â")
    print("-" * 30)
    
    try:
        # Pr√©paration des donn√©es
        lstm_ultra = UltraLSTMPredictor(data)
        X_train, y_train, X_val, y_val, X_test, y_test = lstm_ultra.prepare_ultra_data(
            sequence_length=15,
            test_size=0.08,
            validation_size=0.12,
            use_ultra_features=True
        )
        
        # Entra√Ænement de l'ensemble
        lstm_ultra.train_ensemble(
            X_train, y_train, X_val, y_val,
            epochs=50,
            batch_size=16
        )
        
        # √âvaluation
        metrics_ultra = lstm_ultra.evaluate_ensemble(X_test, y_test)
        
        print("\nüìà M√©triques LSTM Ultra-Avanc√©:")
        for metric, value in metrics_ultra.items():
            print(f"  {metric}: {value:.4f}")
            
        # Analyse des r√©sultats
        print("\nüéØ ANALYSE DES R√âSULTATS")
        print("-" * 30)
        
        if metrics_ultra['R2'] > 0:
            print(f"‚úÖ R¬≤ positif: {metrics_ultra['R2']:.4f} - Le mod√®le est pr√©dictif!")
        else:
            print(f"‚ö†Ô∏è R¬≤ n√©gatif: {metrics_ultra['R2']:.4f} - Le mod√®le n√©cessite des am√©liorations")
        
        if metrics_ultra['Direction_Accuracy'] > 60:
            print(f"‚úÖ Direction Accuracy excellente: {metrics_ultra['Direction_Accuracy']:.1f}%")
        elif metrics_ultra['Direction_Accuracy'] > 50:
            print(f"‚úÖ Direction Accuracy bonne: {metrics_ultra['Direction_Accuracy']:.1f}%")
        else:
            print(f"‚ö†Ô∏è Direction Accuracy faible: {metrics_ultra['Direction_Accuracy']:.1f}%")
        
        if metrics_ultra['MAPE'] < 5:
            print(f"‚úÖ MAPE excellente: {metrics_ultra['MAPE']:.2f}%")
        elif metrics_ultra['MAPE'] < 10:
            print(f"‚úÖ MAPE bonne: {metrics_ultra['MAPE']:.2f}%")
        else:
            print(f"‚ö†Ô∏è MAPE √©lev√©e: {metrics_ultra['MAPE']:.2f}%")
        
        if metrics_ultra['Profit_Factor'] > 1.5:
            print(f"‚úÖ Profit Factor excellent: {metrics_ultra['Profit_Factor']:.2f}")
        elif metrics_ultra['Profit_Factor'] > 1.0:
            print(f"‚úÖ Profit Factor positif: {metrics_ultra['Profit_Factor']:.2f}")
        else:
            print(f"‚ö†Ô∏è Profit Factor faible: {metrics_ultra['Profit_Factor']:.2f}")
        
        print(f"\nüéâ PERFORMANCE GLOBALE: {len([m for m in [metrics_ultra['R2'] > 0, metrics_ultra['Direction_Accuracy'] > 50, metrics_ultra['MAPE'] < 10, metrics_ultra['Profit_Factor'] > 1.0] if m])}/4 crit√®res r√©ussis")
            
    except Exception as e:
        print(f"‚ùå Erreur LSTM Ultra-Avanc√©: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    # Test avec Apple
    test_ultra_lstm("AAPL") 