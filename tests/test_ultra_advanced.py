#!/usr/bin/env python3
"""
Test du LSTM Ultra-Avanc√© avec donn√©es √©tendues et architectures de pointe
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from lstm_ultra import UltraAdvancedLSTM
from data_collector import DataCollector
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_ultra_advanced_lstm(symbol: str = "AAPL"):
    """Test du LSTM ultra-avanc√© avec donn√©es √©tendues"""
    print("üöÄ TEST LSTM ULTRA-AVANC√â V2.0")
    print(f"Symbole: {symbol}")
    print("=" * 60)
    
    try:
        # Initialisation du pr√©dicteur ultra-avanc√©
        lstm_ultra = UltraAdvancedLSTM(symbol=symbol)
        
        # Lancement de l'analyse compl√®te
        print("\nüöÄ TEST LSTM ULTRA-AVANC√â")
        print("-" * 30)
        
        metrics = lstm_ultra.run_ultra_analysis(sequence_length=20)
        
        print(f"\nüìà M√©triques LSTM Ultra-Avanc√© V2.0:")
        print(f"  MSE: {metrics['MSE']:.4f}")
        print(f"  MAE: {metrics['MAE']:.4f}")
        print(f"  RMSE: {metrics['RMSE']:.4f}")
        print(f"  R¬≤: {metrics['R2']:.4f}")
        print(f"  MAPE: {metrics['MAPE']:.4f}")
        print(f"  Direction_Accuracy: {metrics['Direction_Accuracy']:.4f}")
        print(f"  Profit_Factor: {metrics['Profit_Factor']:.4f}")
        
        print(f"\nüéØ ANALYSE DES R√âSULTATS")
        print("-" * 30)
        
        # Crit√®res de performance
        criteria_met = 0
        total_criteria = 4
        
        if metrics['R2'] > 0.3:
            print("‚úÖ R¬≤ > 0.3 - Bonne capacit√© pr√©dictive")
            criteria_met += 1
        else:
            print(f"‚ö†Ô∏è R¬≤ = {metrics['R2']:.4f} - Capacit√© pr√©dictive √† am√©liorer")
        
        if metrics['Direction_Accuracy'] > 55:
            print("‚úÖ Direction Accuracy > 55% - Bonne pr√©diction de direction")
            criteria_met += 1
        else:
            print(f"‚ö†Ô∏è Direction Accuracy = {metrics['Direction_Accuracy']:.2f}% - Pr√©diction de direction √† am√©liorer")
        
        if metrics['MAPE'] < 50:
            print("‚úÖ MAPE < 50% - Pr√©cision acceptable")
            criteria_met += 1
        else:
            print(f"‚ö†Ô∏è MAPE = {metrics['MAPE']:.2f}% - Pr√©cision √† am√©liorer")
        
        if metrics['Profit_Factor'] > 1.2:
            print("‚úÖ Profit Factor > 1.2 - Potentiel de profit")
            criteria_met += 1
        else:
            print(f"‚ö†Ô∏è Profit Factor = {metrics['Profit_Factor']:.4f} - Potentiel de profit √† am√©liorer")
        
        print(f"\nüéâ PERFORMANCE GLOBALE: {criteria_met}/{total_criteria} crit√®res r√©ussis")
        
        if criteria_met >= 3:
            print("üåü EXCELLENT - Le mod√®le est pr√™t pour le trading!")
        elif criteria_met >= 2:
            print("üëç BON - Le mod√®le montre des signes prometteurs")
        elif criteria_met >= 1:
            print("‚ö†Ô∏è MOYEN - Le mod√®le n√©cessite des am√©liorations")
        else:
            print("‚ùå INSUFFISANT - Le mod√®le n√©cessite une refonte compl√®te")
        
        return metrics
        
    except Exception as e:
        logger.error(f"‚ùå Erreur LSTM Ultra-Avanc√©: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    # Test sur Apple
    test_ultra_advanced_lstm("AAPL") 