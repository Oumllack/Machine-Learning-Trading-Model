"""
Script de d√©monstration avec simulations de trading r√©elles
"""

import sys
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import numpy as np

# Ajouter le chemin parent pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.trading_bot_simple import SimpleTradingBot
from core.trading_bot_aggressive import AggressiveTradingBot
from core.data_collector import DataCollector
from core.technical_analysis import TechnicalAnalysis

def run_real_trading_simulation(symbol='AAPL', days=60, capital=10000, bot_type='simple'):
    """
    Ex√©cute une vraie simulation de trading
    """
    print(f"üöÄ SIMULATION DE TRADING R√âELLE - {symbol}")
    print("=" * 60)
    
    # Cr√©er le bot appropri√©
    if bot_type == 'aggressive':
        bot = AggressiveTradingBot(
            symbol=symbol,
            initial_capital=capital,
            risk_per_trade=0.05,
            max_position_size=0.3
        )
        print("ü§ñ Bot agressif configur√©")
    else:
        bot = SimpleTradingBot(
            symbol=symbol,
            initial_capital=capital,
            risk_per_trade=0.03,
            max_position_size=0.2
        )
        print("ü§ñ Bot simple configur√©")
    
    # Pr√©parer les donn√©es
    print("üìä R√©cup√©ration des donn√©es...")
    data = bot.prepare_data(period="1y")
    
    if data is None:
        print(f"‚ùå Impossible de r√©cup√©rer les donn√©es pour {symbol}")
        return None
    
    print(f"‚úÖ {len(data)} enregistrements r√©cup√©r√©s")
    
    # Ex√©cuter la simulation
    print(f"üîÑ Simulation sur {days} jours...")
    bot.run_trading_session(days=days)
    
    # Obtenir les m√©triques
    metrics = bot.get_performance_metrics()
    
    print(f"\nüìä R√âSULTATS DE LA SIMULATION")
    print("=" * 50)
    print(f"Rendement total: {metrics.get('total_return_pct', 0):.2f}%")
    print(f"Nombre de trades: {metrics.get('total_trades', 0)}")
    print(f"Taux de r√©ussite: {metrics.get('win_rate', 0):.2%}")
    print(f"Gain moyen: {metrics.get('avg_win', 0):,.2f} ‚Ç¨")
    print(f"Perte moyenne: {metrics.get('avg_loss', 0):,.2f} ‚Ç¨")
    print(f"Capital final: {metrics.get('final_capital', capital):,.2f} ‚Ç¨")
    
    return bot, metrics

def generate_trading_charts(bot, symbol, save_dir='../images'):
    """
    G√©n√®re des graphiques de trading avec des donn√©es r√©elles
    """
    print(f"üìà G√©n√©ration des graphiques pour {symbol}...")
    
    # Cr√©er le dossier si n√©cessaire
    os.makedirs(save_dir, exist_ok=True)
    
    # Donn√©es du bot
    data = bot.data
    trades = bot.trades
    portfolio_values = bot.portfolio_values
    
    # 1. Graphique des prix avec trades
    plt.figure(figsize=(15, 10))
    
    # Prix
    plt.subplot(2, 2, 1)
    plt.plot(data.index, data['Close'], label='Prix de cl√¥ture', linewidth=2)
    
    # Ajouter les trades
    if trades:
        buy_trades = [t for t in trades if t['type'] == 'BUY']
        sell_trades = [t for t in trades if t['type'] == 'SELL']
        
        if buy_trades:
            buy_dates = [t['date'] for t in buy_trades]
            buy_prices = [t['price'] for t in buy_trades]
            plt.scatter(buy_dates, buy_prices, color='green', marker='^', s=100, label='Achats', zorder=5)
        
        if sell_trades:
            sell_dates = [t['date'] for t in sell_trades]
            sell_prices = [t['price'] for t in sell_trades]
            plt.scatter(sell_dates, sell_prices, color='red', marker='v', s=100, label='Ventes', zorder=5)
    
    plt.title(f'Prix et Trades - {symbol}')
    plt.xlabel('Date')
    plt.ylabel('Prix (‚Ç¨)')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # 2. √âvolution du portefeuille
    plt.subplot(2, 2, 2)
    if portfolio_values:
        dates = list(portfolio_values.keys())
        values = list(portfolio_values.values())
        plt.plot(dates, values, label='Valeur du portefeuille', linewidth=2, color='blue')
        plt.axhline(y=bot.initial_capital, color='red', linestyle='--', label='Capital initial')
        plt.title(f'√âvolution du Portefeuille - {symbol}')
        plt.xlabel('Date')
        plt.ylabel('Valeur (‚Ç¨)')
        plt.legend()
        plt.grid(True, alpha=0.3)
    
    # 3. Indicateurs techniques
    plt.subplot(2, 2, 3)
    if 'RSI' in data.columns:
        plt.plot(data.index, data['RSI'], label='RSI', linewidth=2)
        plt.axhline(y=70, color='red', linestyle='--', alpha=0.7)
        plt.axhline(y=30, color='green', linestyle='--', alpha=0.7)
        plt.title(f'RSI - {symbol}')
        plt.xlabel('Date')
        plt.ylabel('RSI')
        plt.legend()
        plt.grid(True, alpha=0.3)
    
    # 4. Distribution des rendements
    plt.subplot(2, 2, 4)
    if trades:
        returns = []
        for trade in trades:
            if 'pnl' in trade and trade['pnl'] != 0:
                returns.append(trade['pnl'])
        
        if returns:
            plt.hist(returns, bins=20, alpha=0.7, color='skyblue', edgecolor='black')
            plt.axvline(x=0, color='red', linestyle='--', label='Break-even')
            plt.title(f'Distribution des P&L - {symbol}')
            plt.xlabel('P&L (‚Ç¨)')
            plt.ylabel('Fr√©quence')
            plt.legend()
            plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(f'{save_dir}/trading_simulation_{symbol}.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"‚úÖ Graphique sauvegard√©: trading_simulation_{symbol}.png")

def run_comparison_simulation():
    """
    Compare les performances des bots simple et agressif
    """
    print("üîÑ COMPARAISON BOT SIMPLE vs AGRESSIF")
    print("=" * 60)
    
    symbols = ['AAPL', 'MSFT', 'TSLA']
    results = {}
    
    for symbol in symbols:
        print(f"\nüìà Test de {symbol}")
        print("-" * 40)
        
        # Bot simple
        print("ü§ñ Bot simple:")
        simple_bot, simple_metrics = run_real_trading_simulation(
            symbol=symbol, days=30, capital=5000, bot_type='simple'
        )
        
        if simple_bot:
            generate_trading_charts(simple_bot, f"{symbol}_simple")
        
        # Bot agressif
        print("\nü§ñ Bot agressif:")
        aggressive_bot, aggressive_metrics = run_real_trading_simulation(
            symbol=symbol, days=30, capital=5000, bot_type='aggressive'
        )
        
        if aggressive_bot:
            generate_trading_charts(aggressive_bot, f"{symbol}_aggressive")
        
        # Comparaison
        if simple_metrics and aggressive_metrics:
            results[symbol] = {
                'simple': simple_metrics,
                'aggressive': aggressive_metrics
            }
            
            print(f"\nüìä COMPARAISON {symbol}:")
            print(f"  Simple: {simple_metrics.get('total_return_pct', 0):.2f}% ({simple_metrics.get('total_trades', 0)} trades)")
            print(f"  Agressif: {aggressive_metrics.get('total_return_pct', 0):.2f}% ({aggressive_metrics.get('total_trades', 0)} trades)")
    
    # Graphique de comparaison
    if results:
        create_comparison_chart(results)

def create_comparison_chart(results):
    """
    Cr√©e un graphique de comparaison des performances
    """
    symbols = list(results.keys())
    simple_returns = [results[s]['simple'].get('total_return_pct', 0) for s in symbols]
    aggressive_returns = [results[s]['aggressive'].get('total_return_pct', 0) for s in symbols]
    
    x = np.arange(len(symbols))
    width = 0.35
    
    plt.figure(figsize=(12, 8))
    
    plt.subplot(2, 2, 1)
    bars1 = plt.bar(x - width/2, simple_returns, width, label='Bot Simple', color='lightblue')
    bars2 = plt.bar(x + width/2, aggressive_returns, width, label='Bot Agressif', color='lightcoral')
    
    plt.xlabel('Symboles')
    plt.ylabel('Rendement (%)')
    plt.title('Comparaison des Rendements')
    plt.xticks(x, symbols)
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # Ajouter les valeurs sur les barres
    for bar in bars1:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{height:.1f}%', ha='center', va='bottom')
    
    for bar in bars2:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{height:.1f}%', ha='center', va='bottom')
    
    # Comparaison du nombre de trades
    plt.subplot(2, 2, 2)
    simple_trades = [results[s]['simple'].get('total_trades', 0) for s in symbols]
    aggressive_trades = [results[s]['aggressive'].get('total_trades', 0) for s in symbols]
    
    bars3 = plt.bar(x - width/2, simple_trades, width, label='Bot Simple', color='lightblue')
    bars4 = plt.bar(x + width/2, aggressive_trades, width, label='Bot Agressif', color='lightcoral')
    
    plt.xlabel('Symboles')
    plt.ylabel('Nombre de Trades')
    plt.title('Comparaison du Nombre de Trades')
    plt.xticks(x, symbols)
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # Taux de r√©ussite
    plt.subplot(2, 2, 3)
    simple_winrate = [results[s]['simple'].get('win_rate', 0) * 100 for s in symbols]
    aggressive_winrate = [results[s]['aggressive'].get('win_rate', 0) * 100 for s in symbols]
    
    bars5 = plt.bar(x - width/2, simple_winrate, width, label='Bot Simple', color='lightblue')
    bars6 = plt.bar(x + width/2, aggressive_winrate, width, label='Bot Agressif', color='lightcoral')
    
    plt.xlabel('Symboles')
    plt.ylabel('Taux de R√©ussite (%)')
    plt.title('Comparaison des Taux de R√©ussite')
    plt.xticks(x, symbols)
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # R√©sum√© statistique
    plt.subplot(2, 2, 4)
    plt.axis('off')
    
    summary_text = "R√âSUM√â DES PERFORMANCES\n\n"
    for symbol in symbols:
        simple = results[symbol]['simple']
        aggressive = results[symbol]['aggressive']
        
        summary_text += f"{symbol}:\n"
        summary_text += f"  Simple: {simple.get('total_return_pct', 0):.2f}% ({simple.get('total_trades', 0)} trades)\n"
        summary_text += f"  Agressif: {aggressive.get('total_return_pct', 0):.2f}% ({aggressive.get('total_trades', 0)} trades)\n\n"
    
    plt.text(0.1, 0.9, summary_text, transform=plt.gca().transAxes, 
             fontsize=10, verticalalignment='top', fontfamily='monospace')
    
    plt.tight_layout()
    plt.savefig('../images/trading_comparison.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ Graphique de comparaison sauvegard√©: trading_comparison.png")

def main():
    """
    Fonction principale
    """
    print("üöÄ D√âMONSTRATION DE TRADING AVEC SIMULATIONS R√âELLES")
    print("=" * 70)
    
    if len(sys.argv) > 1:
        if sys.argv[1] == 'compare':
            run_comparison_simulation()
        elif sys.argv[1] == 'single':
            symbol = sys.argv[2] if len(sys.argv) > 2 else 'AAPL'
            bot_type = sys.argv[3] if len(sys.argv) > 3 else 'simple'
            bot, metrics = run_real_trading_simulation(symbol, 60, 10000, bot_type)
            if bot:
                generate_trading_charts(bot, symbol)
        else:
            print("Usage: python demo_trading_real.py [compare|single] [symbol] [bot_type]")
    else:
        # Mode par d√©faut: comparaison compl√®te
        run_comparison_simulation()

if __name__ == "__main__":
    main() 